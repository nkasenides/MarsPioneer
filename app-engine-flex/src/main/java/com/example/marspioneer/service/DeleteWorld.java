/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.*;
import com.example.marspioneer.persistence.Cache;
import com.example.marspioneer.persistence.DBManager;
import com.example.marspioneer.proto.DeleteTeamResponse;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.proto.DeleteWorldRequest;
import com.example.marspioneer.auth.*;
import com.example.marspioneer.proto.DeleteWorldResponse;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.firestorm.FirestormBatch;
import com.raylabz.firestorm.FirestormTransaction;

import javax.servlet.ServletContext;
import java.net.SocketException;
import java.util.Collection;

public class DeleteWorld implements AthlosService<DeleteWorldRequest, DeleteWorldResponse> {

    @Override    
    public DeleteWorldResponse serve(DeleteWorldRequest request, Object... additionalParams) {

        //Verify game session:
        final MPPlayer player = Auth.verifyGameSessionID(request.getGameSessionID());
        if (player == null) {
            return DeleteWorldResponse.newBuilder()
                    .setStatus(DeleteWorldResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AUTHORIZED")
                    .build();
        }

        //Retrieve world:
        final MPWorld world = DBManager.world.get(request.getWorldID());
        if (world == null) {
            return DeleteWorldResponse.newBuilder()
                    .setStatus(DeleteWorldResponse.Status.NO_SUCH_WORLD)
                    .setMessage("NO_SUCH_WORLD")
                    .build();
        }

        //Is the current player the owner of the world?
        if (!player.getId().equals(world.getOwnerID())) {
            return DeleteWorldResponse.newBuilder()
                    .setStatus(DeleteWorldResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AN_OWNER")
                    .build();
        }


        //Delete world terrain, entities & sessions:
        final Collection<MPTerrainChunk> mpTerrainChunks = DBManager.terrainChunk.listForWorld(world.getId());
        final Collection<MPTerrainIdentifier> mpTerrainIdentifiers = DBManager.terrainIdentifier.listForWorld(world.getId());
        final Collection<MPWorldSession> mpWorldSessions = DBManager.worldSession.listForWorld(world.getId());
        final Collection<BuildingEntity> entities = DBManager.buildingEntity.listForWorld(world.getId());

        for (MPTerrainChunk terrainChunk : mpTerrainChunks) {
            DBManager.terrainChunk.delete(terrainChunk);
        }
        for (MPTerrainIdentifier terrainIdentifier : mpTerrainIdentifiers) {
            DBManager.terrainIdentifier.delete(terrainIdentifier);
        }
        for (MPWorldSession worldSession : mpWorldSessions) {
            DBManager.worldSession.delete(worldSession);
        }
        for (BuildingEntity entity : entities) {
            DBManager.buildingEntity.delete(entity);
        }


        //Delete the world:
        DBManager.world.delete(world);

        return DeleteWorldResponse.newBuilder()
                .setStatus(DeleteWorldResponse.Status.OK)
                .setMessage("OK")
                .build();

    }
    
}

