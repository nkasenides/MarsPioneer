/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.*;
import com.example.marspioneer.persistence.DBManager;
import com.example.marspioneer.proto.*;
import com.example.marspioneer.state.State;
import com.example.marspioneer.state.StateUpdateBuilder;
import com.example.marspioneer.websocket.UpdateStateWebSocket;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.auth.*;

import java.io.IOException;
import java.util.Random;

public class JoinWorld implements AthlosService<JoinWorldRequest, JoinWorldResponse> {

    @Override    
    public JoinWorldResponse serve(JoinWorldRequest request, Object... additionalParams) {

        //Verify game session:
        final MPPlayer player = Auth.verifyGameSessionID(request.getGameSessionID());
        if (player == null) {
            return JoinWorldResponse.newBuilder()
                    .setStatus(JoinWorldResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AUTHORIZED")
                    .build();
        }

        final MPGameSession gameSession = DBManager.gameSession.get(request.getGameSessionID());
        if (gameSession == null) {
            return JoinWorldResponse.newBuilder()
                    .setStatus(JoinWorldResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_GAME_SESSION")
                    .build();
        }

        //Check world:
        final MPWorld world = DBManager.world.get(request.getWorldID());
        if (world == null) {
            return JoinWorldResponse.newBuilder()
                    .setStatus(JoinWorldResponse.Status.NO_SUCH_WORLD)
                    .setMessage("NO_SUCH_WORLD")
                    .build();
        }

        //Search for an existing session for this player:
        MPWorldSession worldSession = DBManager.worldSession.getForPlayerAndWorld(player.getId(), world.getId());
        if (worldSession != null) {
            return JoinWorldResponse.newBuilder()
                    .setWorldSession(worldSession.toProto())
                    .setWorld(world.toProto())
                    .setStatus(JoinWorldResponse.Status.OK)
                    .setMessage("OK")
                    .build();
        }

        //Create the world session:
        worldSession = new MPWorldSession();
        worldSession.setWorldID(world.getId());
        worldSession.setCreatedOn(System.currentTimeMillis());
        worldSession.setExpiresOn(-1);
        worldSession.setIpAddress((String) additionalParams[0]);
        worldSession.setPlayerID(player.getId());

        //Create the entity:
        BuildingEntity firstEntity = new BuildingEntity();
        firstEntity.setWorldID(world.getId());
        firstEntity.setPlayerID(player.getId());
        Random random = new Random();
        final int row = random.nextInt(2000);
        final int col = random.nextInt(2000);
        firstEntity.setPosition(new MatrixPosition(row, col));
        firstEntity.setBuildingType(EBuildingType.HUB_EBuildingType);
        firstEntity.setAreaOfInterest(10);
        firstEntity.setDirection(Direction4.NORTH);

        worldSession.setCameraPosition(new MatrixPosition(row, col));

        DBManager.worldSession.create(worldSession);
        DBManager.buildingEntity.create(firstEntity);

        //Define and send the state update:
        final StateUpdateBuilder stateUpdateBuilder = StateUpdateBuilder.create().addUpdatedEntity(firstEntity);
        try {
            State.sendUpdate(worldSession, stateUpdateBuilder, worldSession.getWorldID(), firstEntity.getPosition(), 10, false, false);
        } catch (IOException e) {
            e.printStackTrace();
        }


        return JoinWorldResponse.newBuilder()
                .setStatus(JoinWorldResponse.Status.OK)
                .setMessage("OK")
                .setWorld(world.toProto())
                .setWorldSession(worldSession.toProto())
                .build();

    }    
    
}

