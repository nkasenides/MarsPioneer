/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.MPGameSession;
import com.example.marspioneer.model.MPPlayer;
import com.example.marspioneer.model.MPTeam;
import com.example.marspioneer.persistence.DBManager;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.proto.AddPlayerToTeamRequest;
import com.example.marspioneer.auth.*;
import com.example.marspioneer.proto.AddPlayerToTeamResponse;

public class AddPlayerToTeam implements AthlosService<AddPlayerToTeamRequest, AddPlayerToTeamResponse> {

    @Override    
    public AddPlayerToTeamResponse serve(AddPlayerToTeamRequest request, Object... additionalParams) {

        //Verify game session:
        final String gameSessionID = request.getGameSessionID();
        final MPPlayer player = Auth.verifyGameSessionID(gameSessionID);
        if (player == null) {
            return AddPlayerToTeamResponse.newBuilder()
                    .setStatus(AddPlayerToTeamResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NO_SUCH_PLAYER")
                    .build();
        }

        //Verify adding player is the player being added:
        final MPGameSession gameSession = DBManager.gameSession.get(gameSessionID);
        if (!player.getId().equals(gameSession.getPlayerID())) {
            return AddPlayerToTeamResponse.newBuilder()
                    .setStatus(AddPlayerToTeamResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_OWNER")
                    .build();
        }

        //Retrieve team, check if it exists:
        final MPTeam team = DBManager.team.get(request.getTeamID());
        if (team == null) {
            return AddPlayerToTeamResponse.newBuilder()
                    .setStatus(AddPlayerToTeamResponse.Status.NO_SUCH_TEAM)
                    .setMessage("NO_SUCH_TEAM")
                    .build();
        }

        //Check that the player is not already in a team:
        if (player.getTeamID() != null && !player.getTeamID().trim().isEmpty()) {
            return AddPlayerToTeamResponse.newBuilder()
                    .setStatus(AddPlayerToTeamResponse.Status.PLAYER_ALREADY_IN_TEAM)
                    .setMessage("PLAYER_ALREADY_IN_TEAM")
                    .build();
        }

        //Check that the team has available space:
        //Note: A player limit of -1 signifies a team without a player limit.
        if (team.getPlayerLimit() != -1 && team.getPlayerIDs().size() >= team.getPlayerLimit()) {
            return AddPlayerToTeamResponse.newBuilder()
                    .setStatus(AddPlayerToTeamResponse.Status.TEAM_FULL)
                    .setMessage("TEAM_FULL")
                    .build();
        }

        //Put the player in the team:
        team.getPlayerIDs().add(player.getId());
        player.setTeamID(team.getId());

        //Update data and respond:
        if (!DBManager.team.update(team) || !DBManager.player.update(player)) {
            return AddPlayerToTeamResponse.newBuilder()
                    .setStatus(AddPlayerToTeamResponse.Status.SERVER_ERROR)
                    .setMessage("SERVER_ERROR")
                    .build();
        }

        return AddPlayerToTeamResponse.newBuilder()
                .setStatus(AddPlayerToTeamResponse.Status.OK)
                .setMessage("OK")
                .build();
    }    
    
}

