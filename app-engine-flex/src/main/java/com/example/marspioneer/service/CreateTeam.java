/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.MPPlayer;
import com.example.marspioneer.model.MPTeam;
import com.example.marspioneer.persistence.DBManager;
import com.example.marspioneer.proto.TeamColor;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.proto.CreateTeamRequest;
import com.example.marspioneer.auth.*;
import com.example.marspioneer.proto.CreateTeamResponse;

import java.util.ArrayList;

public class CreateTeam implements AthlosService<CreateTeamRequest, CreateTeamResponse> {

    @Override    
    public CreateTeamResponse serve(CreateTeamRequest request, Object... additionalParams) {

        final MPTeam team = request.getTeam().toObject();

        //Verify team data:
        if (team.getName() == null) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_NAME_EMPTY")
                    .build();
        }


        if (team.getName().trim().isEmpty()) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_NAME_EMPTY")
                    .build();
        }

        if (team.getName().length() < 2) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_NAME_LENGTH")
                    .build();
        }

        //Check if team already exists:
        final MPTeam byName = DBManager.team.getByName(team.getName());
        if (byName != null) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.TEAM_EXISTS)
                    .setMessage("TEAM_EXISTS")
                    .build();
        }
        final MPTeam byColor = DBManager.team.getByColor(team.getColor());
        if (byColor != null) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.TEAM_EXISTS)
                    .setMessage("TEAM_EXISTS")
                    .build();
        }

        //Verify game session:
        final String gameSessionID = request.getGameSessionID();
        if (gameSessionID.trim().isEmpty()) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NO_GAME_SESSION_ID")
                    .build();
        }

        final MPPlayer mpPlayer = Auth.verifyGameSessionID(gameSessionID);
        if (mpPlayer == null) {
            return CreateTeamResponse.newBuilder()
                    .setStatus(CreateTeamResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AUTHORIZED")
                    .build();
        }

        //Set team default values:
        team.setPlayerIDs(new ArrayList<>());

        //Create the team:
        DBManager.team.create(team);

        return CreateTeamResponse.newBuilder()
                .setTeam(team.toProto())
                .setStatus(CreateTeamResponse.Status.OK)
                .setMessage("OK")
                .build();

    }    
    
}

