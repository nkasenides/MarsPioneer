/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.MPPlayer;
import com.example.marspioneer.persistence.DBManager;
import com.example.marspioneer.proto.*;
import com.google.protobuf.NullValue;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.auth.*;

public class CreatePlayer implements AthlosService<CreatePlayerRequest, CreatePlayerResponse> {

    @Override    
    public CreatePlayerResponse serve(CreatePlayerRequest request, Object... additionalParams) {

        //Check the player information:
        if (!request.hasPlayer()) {
            return CreatePlayerResponse.newBuilder()
                    .setStatus(CreatePlayerResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_NAME_EMPTY")
                    .build();
        }

        //Retrieve the player:
        final MPPlayer player = request.getPlayer().toObject();
        if (player.getName().trim().isEmpty()) {
            return CreatePlayerResponse.newBuilder()
                    .setStatus(CreatePlayerResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_NAME_EMPTY")
                    .build();
        }

        //Name validation:
        if (player.getName().length() < 2) {
            return CreatePlayerResponse.newBuilder()
                    .setStatus(CreatePlayerResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_NAME_LENGTH")
                    .build();
        }

        if (player.getPassword().trim().isEmpty()) {
            return CreatePlayerResponse.newBuilder()
                    .setStatus(CreatePlayerResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_PASSWORD_EMPTY")
                    .build();
        }

        if (player.getPassword().length() < 4) {
            return CreatePlayerResponse.newBuilder()
                    .setStatus(CreatePlayerResponse.Status.INVALID_DATA)
                    .setMessage("INVALID_PASSWORD_LENGTH")
                    .build();
        }

        //Check if a player with that name already exists:
        if (DBManager.player.getByName(player.getName()) != null) {
            return CreatePlayerResponse.newBuilder()
                    .setStatus(CreatePlayerResponse.Status.PLAYER_EXISTS)
                    .setMessage("PLAYER_NAME_EXISTS")
                    .build();
        }

        //Set the player's default attributes:
        player.setCreatedOn(System.currentTimeMillis());
        player.setFarmingResearch(FarmResearchLevel.LEVEL_1_FarmResearchLevel);
        player.setMiningResearch(MineResearchLevel.LEVEL_1_MineResearchLevel);
        player.setSandResearch(SandPitResearchLevel.LEVEL_1_SandPitResearchLevel);
        player.setWaterResearch(WellResearchLevel.LEVEL_1_WellResearchLevel);
        player.setFood(20000);
        player.setWater(20000);
        player.setSand(20000);
        player.setMetal(20000);
        player.setLastCollected(System.currentTimeMillis());

        //Create the player:
        DBManager.player.create(player);

        return CreatePlayerResponse.newBuilder()
                .setPlayer(player.toProto())
                .setStatus(CreatePlayerResponse.Status.OK)
                .setMessage("SUCCESS")
                .build();

    }    
    
}

