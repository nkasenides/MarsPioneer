/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.*;
import com.example.marspioneer.persistence.DBManager;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.proto.DeletePlayerRequest;
import com.example.marspioneer.auth.*;
import com.example.marspioneer.proto.DeletePlayerResponse;

import java.util.ArrayList;
import java.util.Collection;

public class DeletePlayer implements AthlosService<DeletePlayerRequest, DeletePlayerResponse> {

    @Override    
    public DeletePlayerResponse serve(DeletePlayerRequest request, Object... additionalParams) {

        //Validate game session:
        final MPPlayer player = Auth.verifyGameSessionID(request.getGameSessionID());
        if (player == null) {
            return DeletePlayerResponse.newBuilder()
                    .setStatus(DeletePlayerResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AUTHORIZED")
                    .build();
        }

        //Check if calling player is player being deleted:
        if (!player.getId().equals(request.getPlayerID())) {
            return DeletePlayerResponse.newBuilder()
                    .setStatus(DeletePlayerResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AUTHORIZED")
                    .build();
        }

        //Delete from any team:
        if (player.getTeamID() != null) {
            final MPTeam team = DBManager.team.get(player.getTeamID());
            final ArrayList<String> playerIDs = team.getPlayerIDs();
            playerIDs.remove(player.getId());
            team.setPlayerIDs(playerIDs);
            DBManager.team.update(team);
        }

        //Delete the player's entities:
        final Collection<MPEntity> entities = DBManager.entity.listForPlayer(player.getId());
        for (MPEntity entity : entities) {
            DBManager.entity.delete(entity);
        }

        final Collection<BuildingEntity> buildingEntities = DBManager.buildingEntity.listForPlayer(player.getId());
        for (BuildingEntity buildingEntity : buildingEntities) {
            DBManager.buildingEntity.delete(buildingEntity);
        }

        //Delete the player's sessions:
        final Collection<MPWorldSession> worldSessions = DBManager.worldSession.listForPlayer(player.getId());
        for (MPWorldSession worldSession : worldSessions) {
            DBManager.worldSession.delete(worldSession);
        }

        final MPGameSession gameSession = DBManager.gameSession.getForPlayer(player.getId());
        DBManager.gameSession.delete(gameSession);

        return DeletePlayerResponse.newBuilder()
                .setStatus(DeletePlayerResponse.Status.OK)
                .setMessage("OK")
                .build();

    }
    
}

