/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.service;
import com.example.marspioneer.model.MPPlayer;
import com.example.marspioneer.model.MPTeam;
import com.example.marspioneer.persistence.DBManager;
import com.nkasenides.athlos.backend.AthlosService;
import com.example.marspioneer.proto.DeleteTeamRequest;
import com.example.marspioneer.auth.*;
import com.example.marspioneer.proto.DeleteTeamResponse;

public class DeleteTeam implements AthlosService<DeleteTeamRequest, DeleteTeamResponse> {

    @Override    
    public DeleteTeamResponse serve(DeleteTeamRequest request, Object... additionalParams) {

        //Verify game session:
        final MPPlayer player = Auth.verifyGameSessionID(request.getGameSessionID());
        if (player == null) {
            return DeleteTeamResponse.newBuilder()
                    .setStatus(DeleteTeamResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AUTHORIZED")
                    .build();
        }

        //Retrieve team:
        final MPTeam team = DBManager.team.get(request.getTeamID());
        if (team == null) {
            return DeleteTeamResponse.newBuilder()
                    .setStatus(DeleteTeamResponse.Status.NO_SUCH_TEAM)
                    .setMessage("NO_SUCH_TEAM")
                    .build();
        }

        //Is the current player the owner of the team?
        if (!player.getId().equals(team.getOwnerID())) {
            return DeleteTeamResponse.newBuilder()
                    .setStatus(DeleteTeamResponse.Status.NOT_AUTHORIZED)
                    .setMessage("NOT_AN_OWNER")
                    .build();
        }

        if (team.getPlayerIDs().size() > 0) {
            return DeleteTeamResponse.newBuilder()
                    .setStatus(DeleteTeamResponse.Status.CANNOT_DELETE_TEAM)
                    .setMessage("CANNOT_DELETE_PLAYERS_EXIST")
                    .build();
        }

        //Delete the team:
        DBManager.team.delete(team);

        return DeleteTeamResponse.newBuilder()
                .setStatus(DeleteTeamResponse.Status.OK)
                .setMessage("OK")
                .build();
    }    
    
}

