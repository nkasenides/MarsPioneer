/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.persistence;


import com.example.marspioneer.model.MPPlayer;
import com.example.marspioneer.model.MPTeam;
import com.example.marspioneer.proto.TeamColor;
import com.nkasenides.athlos.persistence.MultiDAO;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.firestorm.FirestormBatch;
import com.raylabz.firestorm.FirestormTransaction;
import com.raylabz.firestorm.QueryResult;
import com.raylabz.objectis.Objectis;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.UUID;


public class MPTeamDAO implements MultiDAO<MPTeam> {

    @Override
    public boolean create(MPTeam object) {
        String uuid = UUID.randomUUID().toString();
        object.setId(uuid);
        Objectis.create(object, uuid);
        new Thread(() -> Firestorm.create(object, uuid)).start();
        return true;
    }

    @Override
    public boolean update(MPTeam object) {
        Objectis.update(object);
        new Thread(() -> Firestorm.update(object)).start();
        return true;
    }

    @Override
    public boolean delete(MPTeam object) {

        for (String id : object.getPlayerIDs()) {
            MPPlayer player = Objectis.get(MPPlayer.class, id);
            player.setTeamID(null);
            Objectis.update(player);
        }
        Objectis.delete(object);

        new Thread(() -> Firestorm.runTransaction(new FirestormTransaction() {
            @Override
            public void execute() {
                for (String id : object.getPlayerIDs()) {
                    MPPlayer player = get(MPPlayer.class, id);
                    player.setTeamID(null);
                    update(player);
                }
                delete(object);
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        })).start();

        return true;
    }

    @Override
    public MPTeam get(String id) {
        return Objectis.get(MPTeam.class, id);
    }

    @Override
    public Collection<MPTeam> getMany(String... ids) {
        return Objectis.filter(MPTeam.class)
                .whereArrayContainsAny("id", Arrays.asList(ids))
                .fetch();
    }

    @Override
    public Collection<MPTeam> list() {
        return Objectis.list(MPTeam.class);
    }

    @Override
    public boolean create(Collection<MPTeam> objects) {
        Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (MPTeam g : objects) {
                    create(g);
                    Objectis.create(g);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        });
        return true;
    }

    @Override
    public boolean update(Collection<MPTeam> objects) {

        for (MPTeam object : objects) {
            Objectis.update(object);
        }

        new Thread(() -> Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (MPTeam g : objects) {
                    update(g);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        })).start();
        return true;
    }

    @Override
    public boolean delete(Collection<MPTeam> objects) {

        for (MPTeam object : objects) {
            Objectis.delete(object);
        }

        new Thread(() -> Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (MPTeam g : objects) {
                    delete(g);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        })).start();
        return true;
    }

    /**
     * Lists all of the players of a particular team.
     * @param teamID The team's ID.
     * @return Returns a collection of Players.
     */
    public Collection<MPPlayer> listPlayers(String teamID) {
        return Objectis.filter(MPPlayer.class)
                .whereEqualTo("teamID", teamID)
                .fetch();
    }

    public MPTeam getByName(String name) {
        final ArrayList<MPTeam> teams = Objectis.filter(MPTeam.class)
                .whereEqualTo("name", name)
                .limit(1)
                .fetch();
        if (!teams.isEmpty()) {
            return teams.get(0);
        }
        return null;
    }

    public MPTeam getByColor(TeamColor color) {
        final ArrayList<MPTeam> teams = Objectis.filter(MPTeam.class)
                .whereEqualTo("color", color)
                .limit(1)
                .fetch();
        if (!teams.isEmpty()) {
            return teams.get(0);
        }
        return null;
    }

}


