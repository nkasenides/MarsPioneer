/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.persistence;


import com.nkasenides.athlos.persistence.*;
import com.example.marspioneer.model.*;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.objectis.Objectis;
import com.raylabz.objectis.query.ObjectisQueryResult;

import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.UUID;


public class BuildingEntityDAO implements WorldBasedDAO<BuildingEntity> {


    @Override
    public boolean create(BuildingEntity object) {
        String uuid = UUID.randomUUID().toString();
        object.setId(uuid);
        Objectis.create(object, uuid);
        Objectis.collection(BuildingEntity.class, "entity_" + object.getPlayerID()).add(object); //Add to player entity collection
        Objectis.collection(BuildingEntity.class, "entity_" + object.getWorldID()).add(object); //Add to world entity collection
        Objectis.collection(BuildingEntity.class, "entity_" + object.getPlayerID() + "_" + object.getWorldID()).add(object); //Add to world and player entity collection
//        new Thread(() -> Firestorm.create(object, uuid)).start();
        return true;
    }

    @Override
    public boolean update(BuildingEntity object) {
        Objectis.update(object);
//        new Thread(() -> Firestorm.update(object)).start();
        return true;
    }

    @Override
    public boolean delete(BuildingEntity object) {
        Objectis.collection(BuildingEntity.class, "entity_" + object.getPlayerID()).delete(object); //Add to player entity collection
        Objectis.collection(BuildingEntity.class, "entity_" + object.getWorldID()).delete(object); //Add to world entity collection
        Objectis.collection(BuildingEntity.class, "entity_" + object.getPlayerID() + "_" + object.getWorldID()).delete(object); //Add to world and player entity collection
        Objectis.delete(object);
//        new Thread(() -> Firestorm.delete(object)).start();
        return true;
    }

//    @Override
    public BuildingEntity get(String s) {
        return Objectis.get(BuildingEntity.class, s);
    }

    @Override
    public BuildingEntity getForWorld(String worldID, String itemID) {
        final ObjectisQueryResult<BuildingEntity> result = Objectis.collection(BuildingEntity.class, "entity_" + worldID)
                .filter()
                .whereEqualTo("id", itemID)
                .limit(1)
                .fetch();
        if (result.hasItems()) {
            return result.getItems().get(0);
        }
        return null;
    }

    @Override
    public Collection<BuildingEntity> listForWorld(String worldID) {
        return new ArrayList<>(Objectis.collection(BuildingEntity.class, "entity_" + worldID).list());
    }

/**
     * Retrieves a player's entities within a specific world.
     * @param worldID The world.
     * @param playerID The player.
     * @return Returns a collection of entities.
     */
    public Collection<BuildingEntity> listForPlayerAndWorld(String playerID, String worldID) {
        return new ArrayList<>(Objectis.collection(BuildingEntity.class, "entity_" + playerID + "_" + worldID).list());
    }

    /**
     * Retrieves a player's entities.
     * @param playerID The player.
     * @return Returns a collection of entities.
     */
    public Collection<BuildingEntity> listForPlayer(String playerID) {
        return new ArrayList<>(Objectis.collection(BuildingEntity.class, "entity_" + playerID).list());
    }

//    /**
//     * Retrieves the entities in a world which are not belonging to a particular player.
//     * @param worldID The world ID
//     * @param excludedPlayerID The excluded player ID.
//     * @return Returns a collection of entities.
//     */
//    public Collection<BuildingEntity> listForWorldExcludingPlayer(String worldID, String excludedPlayerID) {
//        final List<BuildingEntity> entities = Objectis.filter(BuildingEntity.class)
//                .whereEqualTo("worldID", worldID)
//                .fetch().getItems();
//
//        final ArrayList<BuildingEntity> oEntities = new ArrayList<>();
//        for (BuildingEntity entity : entities) {
//            if (!entity.getPlayerID().equals(excludedPlayerID)) {
//                oEntities.add(entity);
//            }
//        }
//        return oEntities;
//    }

}


