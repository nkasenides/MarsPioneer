/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.persistence;


import com.example.marspioneer.model.BuildingEntity;
import com.example.marspioneer.model.MPGameSession;
import com.example.marspioneer.model.MPPlayer;
import com.nkasenides.athlos.persistence.MultiDAO;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.firestorm.FirestormBatch;
import com.raylabz.objectis.Objectis;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;


public class MPGameSessionDAO implements MultiDAO<MPGameSession> {


    @Override
    public boolean create(MPGameSession object) {
        Firestorm.create(object);
        Objectis.create(object);
        return true;
    }

    @Override
    public boolean update(MPGameSession object) {
        Objectis.update(object);
        new Thread(() -> Firestorm.update(object));
        return true;
    }

    @Override
    public boolean delete(MPGameSession object) {
        Objectis.delete(object);
        new Thread(() -> Firestorm.delete(object));
        return true;
    }

    @Override
    public MPGameSession get(String id) {
        return Objectis.get(MPGameSession.class, id);
    }

    @Override
    public Collection<MPGameSession> getMany(String... ids) {
        return Objectis.filter(MPGameSession.class)
                .whereArrayContainsAny("id", Arrays.asList(ids))
                .fetch();
    }

    @Override
    public Collection<MPGameSession> list() {
        return Objectis.list(MPGameSession.class);
    }

    @Override
    public boolean create(Collection<MPGameSession> objects) {
        Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (MPGameSession g : objects) {
                    create(g);
                    Objectis.create(g);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        });
        return true;
    }

    @Override
    public boolean update(Collection<MPGameSession> objects) {
        for (MPGameSession object : objects) {
            Objectis.update(object);
        }

        new Thread(() -> Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (MPGameSession g : objects) {
                    update(g);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        })).start();


        return true;
    }

    @Override
    public boolean delete(Collection<MPGameSession> objects) {

        for (MPGameSession object : objects) {
            Objectis.delete(object);
        }

        new Thread(() -> Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (MPGameSession g : objects) {
                    delete(g);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        })).start();

        return true;
    }

    public MPPlayer getPlayer(final String gameSessionID) {
        final MPGameSession gameSession = Firestorm.get(MPGameSession.class, gameSessionID);
        if (gameSession == null) {
            return null;
        }
        return Objectis.get(MPPlayer.class, gameSession.getPlayerID());
    }

    /**
     * Retrieves the game session owned by the provided player.
     * @param playerID The player's ID.
     * @return Returns a GameSession, or null.
     */
    public MPGameSession getForPlayer(final String playerID) {
        final ArrayList<MPGameSession> players = Objectis.filter(MPGameSession.class)
                .whereEqualTo("playerID", playerID)
                .limit(1)
                .fetch();
        if (players.size() == 0) {
            return null;
        }
        return players.get(0);
    }


}


