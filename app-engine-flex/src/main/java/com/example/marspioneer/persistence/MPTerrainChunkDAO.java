/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.persistence;


import com.example.marspioneer.model.MPTerrainChunk;
import com.nkasenides.athlos.persistence.WorldBasedDAO;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.jsec.HashType;
import com.raylabz.jsec.Hashing;
import redis.clients.jedis.Jedis;

import java.util.ArrayList;
import java.util.Collection;


public class MPTerrainChunkDAO implements WorldBasedDAO<MPTerrainChunk> {

    private final Jedis jedis;

    public MPTerrainChunkDAO(Jedis jedis) {
        this.jedis = jedis;
    }

    @Override
    public boolean create(MPTerrainChunk object) {
        final String chunkHash = Hashing.hash(HashType.MD5, object.getPosition().getRow() + "," + object.getPosition().getCol());
        Cache.setObject(jedis, chunkHash, object);
        Cache.addToList(jedis, "TC_WORLD_" + object.getWorldID(), chunkHash);
        new Thread(() -> Firestorm.create(object, chunkHash)).start();
        return true;
    }

    @Override
    public boolean update(MPTerrainChunk object) {
        final String chunkHash = Hashing.hash(HashType.MD5, object.getPosition().getRow() + "," + object.getPosition().getCol());
        Cache.setObject(jedis, chunkHash,object);
        new Thread(() -> Firestorm.update(object)).start();
        return true;
    }

    @Override
    public boolean delete(MPTerrainChunk object) {
        final String chunkHash = Hashing.hash(HashType.MD5, object.getPosition().getRow() + "," + object.getPosition().getCol());
        Cache.remove(jedis, chunkHash);
        Cache.removeFromList(jedis, "TC_WORLD_" + object.getWorldID(), chunkHash);
        new Thread(() -> Firestorm.delete(object)).start();
        return true;
    }

//    @Override
    public MPTerrainChunk get(String s) {
        final MPTerrainChunk object = Cache.getObject(jedis, s, MPTerrainChunk.class);
        if (object == null) {
            Firestorm.get(MPTerrainChunk.class, s);
        }
        return object;
    }

    @Override
    public MPTerrainChunk getForWorld(String worldID, String itemID) {

        final String[] cacheItems = Cache.getAsList(jedis, "TC_WORLD_" + worldID);
        for (String s : cacheItems) {
            final MPTerrainChunk object = Cache.getObject(jedis, s, MPTerrainChunk.class);
            if (object != null && object.getId().equals(itemID)) {
                return object;
            }
        }

        final ArrayList<MPTerrainChunk> items = Firestorm.filter(MPTerrainChunk.class)
                .whereEqualTo("worldID", worldID)
                .whereEqualTo("id", itemID)
                .fetch()
                .getItems();
        if (items.size() == 0) {
            return null;
        }
        Cache.setObject(jedis, itemID, items.get(0));
        Cache.addToList(jedis, "TC_WORLD_" + worldID, itemID);
        return items.get(0);
    }

    @Override
    public Collection<MPTerrainChunk> listForWorld(String worldID) {

        final String[] cacheItems = Cache.getAsList(jedis, "TC_WORLD_" + worldID);
        ArrayList<MPTerrainChunk> chunks = new ArrayList<>();

        for (String s : cacheItems) {
            final MPTerrainChunk object = Cache.getObject(jedis, s, MPTerrainChunk.class);
            chunks.add(object);
        }

        if (chunks.size() > 0) {
            return chunks;
        }

        final ArrayList<MPTerrainChunk> dbChunks = Firestorm.filter(MPTerrainChunk.class)
                .whereEqualTo("worldID", worldID)
                .limit(1)
                .fetch()
                .getItems();
        for (MPTerrainChunk t : dbChunks) {
            Cache.addToList(jedis, "TC_WORLD_" + worldID, t.getId());
        }
        return dbChunks;
    }

}


