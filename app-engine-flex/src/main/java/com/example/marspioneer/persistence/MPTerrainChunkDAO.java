/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.persistence;


import com.example.marspioneer.model.MPTerrainChunk;
import com.nkasenides.athlos.persistence.WorldBasedDAO;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.jsec.HashType;
import com.raylabz.jsec.Hashing;
import com.raylabz.objectis.Objectis;
import redis.clients.jedis.Jedis;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.UUID;


public class MPTerrainChunkDAO implements WorldBasedDAO<MPTerrainChunk> {

    private final Jedis jedis;

    public MPTerrainChunkDAO(Jedis jedis) {
        this.jedis = jedis;
    }

    @Override
    public boolean create(MPTerrainChunk object) {
        final String chunkHash = object.getPosition().toHash();
        object.setId(chunkHash);
        Objectis.create(object, chunkHash);
        new Thread(() -> Firestorm.create(object, chunkHash)).start();
        return true;
    }

    @Override
    public boolean update(MPTerrainChunk object) {
        Objectis.update(object);
        new Thread(() -> Firestorm.update(object)).start();
        return true;
    }

    @Override
    public boolean delete(MPTerrainChunk object) {
        Objectis.delete(MPTerrainChunk.class, object.getPosition().toHash());
        new Thread(() -> Firestorm.delete(MPTerrainChunk.class, object.getPosition().toHash())).start();
        return true;
    }

//    @Override
    public MPTerrainChunk get(String chunkHash) {
        return Objectis.get(MPTerrainChunk.class, chunkHash);
    }

    @Override
    public MPTerrainChunk getForWorld(String worldID, String itemID) {
        final List<MPTerrainChunk> items = Objectis.filter(MPTerrainChunk.class)
                .whereEqualTo("worldID", worldID)
                .whereEqualTo("id", itemID)
                .fetch().getItems();
        if (items.size() == 0) {
            return null;
        }
        return items.get(0);
    }

    @Override
    public Collection<MPTerrainChunk> listForWorld(String worldID) {
        return Objectis.filter(MPTerrainChunk.class)
                .whereEqualTo("worldID", worldID)
                .limit(1)
                .fetch().getItems();
    }

}


