/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.persistence;


import com.example.marspioneer.model.MPTerrainChunk;
import com.example.marspioneer.model.MPTerrainIdentifier;
import com.example.marspioneer.model.MPWorld;
import com.nkasenides.athlos.persistence.WorldBasedDAO;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.jsec.HashType;
import com.raylabz.jsec.Hashing;
import com.raylabz.objectis.Objectis;
import redis.clients.jedis.Jedis;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.UUID;


public class MPTerrainChunkDAO implements WorldBasedDAO<MPTerrainChunk> {

    @Override
    public boolean create(MPTerrainChunk object) {
        String uuid = UUID.randomUUID().toString();
        object.setId(uuid);
        Objectis.create(object, uuid);
        Objectis.collection(MPTerrainChunk.class, "terrain_" + object.getWorldID()).add(object);

        MPTerrainIdentifier identifier = new MPTerrainIdentifier();
        identifier.setChunkID(object.getId());
        identifier.setChunkPosition(object.getPosition());
        identifier.setWorldID(object.getWorldID());
        DBManager.terrainIdentifier.create(identifier);

        new Thread(() -> {
            Firestorm.create(object, uuid);
//            final MPWorld mpWorld = Objectis.get(MPWorld.class, object.getWorldID());
//            mpWorld.addChunk(object.getId());
//            Objectis.update(mpWorld);
        }).start();
        return true;
    }

    @Override
    public boolean update(MPTerrainChunk object) {
        Objectis.update(object);
        new Thread(() -> Firestorm.update(object)).start();
        return true;
    }

    @Override
    public boolean delete(MPTerrainChunk object) {
        Objectis.delete(object);
        //TODO - Use object.getIdentifier() to obtain identifier and delete it.
        new Thread(() -> {
            Firestorm.delete(object);
//            final MPWorld mpWorld = Objectis.get(MPWorld.class, object.getWorldID());
//            mpWorld.getChunkIDs().remove(object.getId());
//            Objectis.update(mpWorld);
        }).start();
        return true;
    }

//    @Override
    public MPTerrainChunk get(String id) {
        return Objectis.get(MPTerrainChunk.class, id);
    }

    @Override
    public MPTerrainChunk getForWorld(String worldID, String hash) {
        final List<MPTerrainChunk> chunks = Objectis.collection(MPTerrainChunk.class, "terrain_" + worldID).list();
        for (MPTerrainChunk chunk : chunks) {
            if (chunk.getPosition().toHash().equals(hash)) {
                return chunk;
            }
        }
        return null;
    }

    @Override
    public Collection<MPTerrainChunk> listForWorld(String worldID) {
        return Objectis.collection(MPTerrainChunk.class, "terrain_" + worldID).list();
    }

}


