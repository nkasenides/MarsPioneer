/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.state;


import com.example.marspioneer.model.*;
import com.example.marspioneer.proto.*;
import java.util.*;

public class StateUpdateBuilder {

    private final MPStateUpdateProto.Builder stateUpdateProtoBuilder = MPStateUpdateProto.newBuilder();

    /**
     * Creates a new StateUpdateBuilder.
     * @return Returns a StateUpdateBuilder.
     */    public static StateUpdateBuilder create() {
        return new StateUpdateBuilder();
    }

    /**
     * Constructs a new StateUpdateBuilder.
     */    public StateUpdateBuilder() {
    }

    /**
     * Retrieves the protocol buffer builder object.
     * @return Returns StateUpdateProto.Builder.
     */
    public MPStateUpdateProto.Builder getStateUpdateProtoBuilder() {
        return stateUpdateProtoBuilder;
    }

    /**
     * Adds an updated entity to the builder.
     * @param entity The entity to add.
     * @return Returns a StateUpdateBuilder
     */    public StateUpdateBuilder addUpdatedEntity(MPEntity entity) {
        stateUpdateProtoBuilder.getPartialStateBuilder().putEntities(entity.getId(), entity.toProto().build());
        return this;
    }

    /**
     * Adds an updated entity to the builder.
     * @param entity The entity to add.
     * @return Returns a StateUpdateBuilder
     */
    public StateUpdateBuilder addUpdatedEntity(MPEntityProto entity) {
        stateUpdateProtoBuilder.getPartialStateBuilder().putEntities(entity.getId(), entity);
        return this;
    }

    /**
     * Adds a removed entity to the builder.
     * @param entityID The ID of the entity removed.
     * @return Returns a StateUpdateBuilder
     */
    public StateUpdateBuilder addRemovedEntity(String entityID) {
        stateUpdateProtoBuilder.addRemovedEntities(entityID);
        return this;
    }

    /**
     * Adds an updated terrain cell to the builder.
     * @param terrainCell The terrain cell to add.
     * @return Returns a StateUpdateBuilder.
     */    public StateUpdateBuilder addUpdatedTerrain(MPTerrainCell terrainCell) {
        stateUpdateProtoBuilder.getPartialStateBuilder().putTerrain(terrainCell.getPosition().toHash(), terrainCell.toProto().build());
        return this;
    }

    /**
     * Adds an updated terrain cell to the builder.
     * @param terrainCell The terrain cell to add.
     * @return Returns a StateUpdateBuilder.
     */    public StateUpdateBuilder addUpdatedTerrain(MPTerrainCellProto terrainCell) {
        stateUpdateProtoBuilder.getPartialStateBuilder().putTerrain(terrainCell.getPosition().toHash(), terrainCell);
        return this;
    }

    /**
     * Adds a removed terrain cell to the builder.
     * @param terrainCellHash The hash of the terrain cell removed.
     * @return Returns a StateUpdateBuilder.
     */    public StateUpdateBuilder addRemovedTerrain(String terrainCellHash) {
        stateUpdateProtoBuilder.addRemovedTerrain(terrainCellHash);
        return this;
    }

    /**
     * Retrieves the map of updated entities.
     * @return Returns a map.
     */
    public Map<String, MPEntityProto> getUpdatedEntities() {
        return stateUpdateProtoBuilder.getPartialStateBuilder().getEntitiesMap();
    }

    /**
     * Retrieves the list of removed entities.
     * @return Returns a map.
     */
    public List<String> getRemovedEntities() {
        return stateUpdateProtoBuilder.getRemovedEntitiesList();
    }

    /**
     * Retrieves the map of updated terrain.
     * @return Returns a map.
     */
    public Map<String, MPTerrainCellProto> getUpdatedTerrain() {
        return stateUpdateProtoBuilder.getPartialState().getTerrainMap();
    }

    /**
     * Retrieves the list of removed terrain.
     * @return Returns a map.
     */
    public List<String> getRemovedTerrain() {
        return stateUpdateProtoBuilder.getRemovedTerrainList();
    }
    /**
     * Builds the state update.
     * @return Returns a state update.
     */
    public MPStateUpdateProto build() {
        return stateUpdateProtoBuilder.build();
    }

    /**
     * Clones the current builder.
     * @return Returns a copied StateUpdateBuilder
     */
    public StateUpdateBuilder clone() {
        StateUpdateBuilder builder = new StateUpdateBuilder();
        for (MPEntityProto entity : getUpdatedEntities().values()) {
            builder.addUpdatedEntity(entity);
        }
        for (String id : getRemovedEntities()) {
            builder.addRemovedEntity(id);
        }
        for (MPTerrainCellProto terrain : getUpdatedTerrain().values()) {
            builder.addUpdatedTerrain(terrain);
        }
        for (String id : getRemovedTerrain()) {
            builder.addRemovedTerrain(id);
        }
        final ResourceSetProto.Builder resSetBuilder = getStateUpdateProtoBuilder().getPartialState().getResourceSet().toBuilder();
        builder.getStateUpdateProtoBuilder().getPartialStateBuilder().setResourceSet(resSetBuilder.build());
        return builder;
    }

    /**
     * Checks if the builder is empty (contains no updates).
     * @return Returns true if the builder is empty, false otherwise.
     */
    public boolean isEmpty() {
        return getUpdatedEntities().isEmpty() && getUpdatedTerrain().isEmpty() && getRemovedEntities().isEmpty() && getRemovedTerrain().isEmpty();
    }

}
