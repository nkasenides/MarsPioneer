/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

syntax = "proto3";
package com.example.marspioneer.proto;
option java_package = "com.example.marspioneer.proto";
option java_outer_classname = "MarsPioneerProto";
option java_multiple_files = true;
//--------------------------------------------------------------------------------
//-- CUSTOM TYPES

message BuildingTypeProto {
  int32 waterOutput = 1;
  int32 areaOfInterest = 2;
  int32 buildLimit = 3;
  int32 foodOutput = 4;
  int32 sandCost = 5;
  EBuildingType type = 6;
  int32 metalOutput = 7;
  int32 citizenAddition = 8;
  int32 waterCost = 9;
  int32 metalCost = 10;
  repeated EBuildingType prerequisites = 11;
  int32 sandOutput = 12;
  int32 foodCost = 13;
}

message ResourceSetProto {
  int32 sand = 1;
  int32 metal = 2;
  int32 water = 3;
  int32 food = 4;
}

//--------------------------------------------------------------------------------
//-- CUSTOM ENUMS

enum FarmResearchLevel {
  LEVEL_1_FarmResearchLevel = 0;
  LEVEL_2_FarmResearchLevel = 1;
  LEVEL_3_FarmResearchLevel = 2;
}

enum CellType {
  SAND_CellType = 0;
  ROCK_CellType = 1;
  LAVA_CellType = 2;
  ICE_CellType = 3;
  GRAVEL_CellType = 4;
}

enum TeamColor {
  RED_TeamColor = 0;
  BLUE_TeamColor = 1;
  GREEN_TeamColor = 2;
}

enum WellResearchLevel {
  LEVEL_1_WellResearchLevel = 0;
  LEVEL_2_WellResearchLevel = 1;
  LEVEL_3_WellResearchLevel = 2;
}

enum MineResearchLevel {
  LEVEL_1_MineResearchLevel = 0;
  LEVEL_2_MineResearchLevel = 1;
  LEVEL_3_MineResearchLevel = 2;
}

enum EBuildingType {
  HUB_EBuildingType = 0;
  FARM_EBuildingType = 1;
  WELL_EBuildingType = 2;
  MINE_EBuildingType = 3;
  SAND_PIT_EBuildingType = 4;
}

enum SandPitResearchLevel {
  LEVEL_1_SandPitResearchLevel = 0;
  LEVEL_2_SandPitResearchLevel = 1;
  LEVEL_3_SandPitResearchLevel = 2;
}

//--------------------------------------------------------------------------------
//-- ATHLOS GAME MODEL

message GeoPositionProto {
  float x = 1;
  float y = 2;
  float z = 3;
  string positionHash = 4;
}

message MatrixPositionProto {
  sint32 row = 1;
  sint32 col = 2;
  string cellHash = 3;
  string chunkHash = 4;
}

enum Direction4 {
  NORTH = 0;
  EAST = 1;
  SOUTH = 2;
  WEST = 3;
}

enum Direction6 {
  NORTH6 = 0;
  NORTH_EAST = 1;
  SOUTH_EAST = 2;
  SOUTH6 = 3;
  SOUTH_WEST = 4;
  NORTH_WEST = 5;
}

enum Rotation {
  CLOCKWISE = 0;
  COUNTER_CLOCKWISE = 1;
}

enum Movement4 {
  FORWARD = 0;
  BACKWARD = 1;
  LEFTWARD = 2;
  RIGHTWARD = 3;
}

enum Movement6 {
  FORWARD6 = 0;
  FORWARD_RIGHT = 1;
  BACKWARD_RIGHT = 2;
  BACKWARD6 = 3;
  BACKWARD_LEFT = 4;
  FORWARD_LEFT = 5;
}

enum WorldType {
  UNIFORM = 0;
  TILE_SQUARE = 1;
  TILE_HEX = 2;
}

message MPGameSessionProto {
  string ipAddress = 1;
  uint64 expiresOn = 2;
  string id = 3;
  uint64 createdOn = 4;
  string playerID = 5;
}

message MPWorldSessionProto {
  string worldID = 1;
  string ipAddress = 2;
  MatrixPositionProto cameraPosition = 3;
  uint64 expiresOn = 4;
  string id = 5;
  uint64 createdOn = 6;
  string playerID = 7;
}

message MPPlayerProto {
  FarmResearchLevel farmingResearch = 1;
  int32 metal = 2;
  WellResearchLevel waterResearch = 3;
  uint64 createdOn = 4;
  int32 water = 5;
  int32 food = 6;
  SandPitResearchLevel sandResearch = 7;
  int32 sand = 8;
  string password = 9;
  string teamID = 10;
  string name = 11;
  string id = 12;
  int64 lastCollected = 13;
  MineResearchLevel miningResearch = 14;
}

message MPTeamProto {
  TeamColor color = 1;
  string name = 2;
  string id = 3;
  string ownerID = 4;
  repeated string playerIDs = 5;
  uint32 playerLimit = 6;
}

//- Entities:

message MPEntityProto {
  string worldID = 1;
  float areaOfInterest = 2;
  string id = 3;
  MatrixPositionProto position = 4;
  string playerID = 5;
  Direction4 direction = 6;
  oneof entity {
    BuildingEntityProto buildingEntity = 7;
  }
}

message BuildingEntityProto {
  string worldID = 1;
  float areaOfInterest = 2;
  string id = 3;
  MatrixPositionProto position = 4;
  EBuildingType buildingType = 5;
  string playerID = 6;
  Direction4 direction = 7;
}

//- Actions:

message MPActionProto {
  oneof action {
    BuildHubProto buildHub = 1;
    SellBuildingProto sellBuilding = 2;
    BuildSandPitProto buildSandPit = 3;
    BuildMineProto buildMine = 4;
    BuildFarmProto buildFarm = 5;
    BuildWellProto buildWell = 6;
  }
}

message BuildHubProto {
}

message SellBuildingProto {
}

message BuildSandPitProto {
}

message BuildMineProto {
}

message BuildFarmProto {
}

message BuildWellProto {
}

message MPTerrainCellProto {
  MatrixPositionProto position = 1;
  CellType type = 2;
  int32 height = 3;
}

message MPTerrainChunkProto {
  string id = 1;
  string worldID = 2;
  MatrixPositionProto position = 3;
  map<string, MPTerrainCellProto> cells = 4;
}

message MPPartialStateProto {
  MPWorldSessionProto worldSession = 1;
  map<string, MPTerrainCellProto> cells = 2;
  map<string, MPEntityProto> entities = 3;
}

message MPWorldProto {
  sint64 maxRows = 1;
  uint32 heightLimit = 2;
  sint64 seed = 3;
  string name = 4;
  repeated string chunkIDs = 5;
  string id = 6;
  string ownerID = 7;
  uint64 createdOn = 8;
  sint64 maxCols = 9;
}

//--------------------------------------------------------------------------------
//- Requests:

message Request {
  oneof request {
    UpdatePlayerRequest updatePlayerRequest = 1;
    UpdateBuildingTypeRequest updateBuildingTypeRequest = 2;
    BuildFarmRequest buildFarmRequest = 3;
    DeleteBuildingTypeRequest deleteBuildingTypeRequest = 4;
    GetPlayerRequest getPlayerRequest = 5;
    UpdateTeamRequest updateTeamRequest = 6;
    ListWorldsRequest listWorldsRequest = 7;
    UpdateWorldRequest updateWorldRequest = 8;
    GetTeamRequest getTeamRequest = 9;
    ListTeamPlayersRequest listTeamPlayersRequest = 10;
    BuildSandPitRequest buildSandPitRequest = 11;
    CreateWorldRequest createWorldRequest = 12;
    SubscribeRequest subscribeRequest = 13;
    BuildHubRequest buildHubRequest = 14;
    ListPlayersRequest listPlayersRequest = 15;
    GetBuildingTypeRequest getBuildingTypeRequest = 16;
    ListTeamsRequest listTeamsRequest = 17;
    CreatePlayerRequest createPlayerRequest = 18;
    DeletePlayerRequest deletePlayerRequest = 19;
    DeleteWorldRequest deleteWorldRequest = 20;
    GetWorldRequest getWorldRequest = 21;
    CreateTeamRequest createTeamRequest = 22;
    UnsubscribeRequest unsubscribeRequest = 23;
    CreateBuildingTypeRequest createBuildingTypeRequest = 24;
    DeleteTeamRequest deleteTeamRequest = 25;
    AddPlayerToTeamRequest addPlayerToTeamRequest = 26;
    JoinWorldRequest joinWorldRequest = 27;
    BuildWellRequest buildWellRequest = 28;
    RemovePlayerFromTeamRequest removePlayerFromTeamRequest = 29;
    AuthenticateRequest authenticateRequest = 30;
    GetStateRequest getStateRequest = 31;
    SellBuildingRequest sellBuildingRequest = 32;
    LeaveWorldRequest leaveWorldRequest = 33;
    UpdateStateRequest updateStateRequest = 34;
    DeAuthenticateRequest deAuthenticateRequest = 35;
    BuildMineRequest buildMineRequest = 36;
    ListBuildingTypesRequest listBuildingTypesRequest = 37;
  }
}

message UpdatePlayerRequest {
  string gameSessionID = 1;
  MPPlayerProto player = 2;
}

message UpdateBuildingTypeRequest {
  MPGameSessionProto gameSessionID = 1;
  BuildingTypeProto buildingType = 2;
}

message BuildFarmRequest {
  string worldSessionID = 1;
  MatrixPositionProto position = 2;
}

message DeleteBuildingTypeRequest {
  MPGameSessionProto gameSessionID = 1;
  string buildingTypeID = 2;
}

message GetPlayerRequest {
  string gameSessionID = 1;
  string playerID = 2;
}

message UpdateTeamRequest {
  string gameSessionID = 1;
  MPTeamProto team = 2;
}

message ListWorldsRequest {
  string gameSessionID = 1;
}

message UpdateWorldRequest {
  string gameSessionID = 1;
  MPWorldProto world = 2;
}

message GetTeamRequest {
  string gameSessionID = 1;
  string teamID = 2;
}

message ListTeamPlayersRequest {
  string gameSessionID = 1;
  string teamID = 2;
}

message BuildSandPitRequest {
  string worldSessionID = 1;
  MatrixPositionProto position = 2;
}

message CreateWorldRequest {
  string gameSessionID = 1;
  MPWorldProto world = 2;
}

message SubscribeRequest {
  string worldSessionID = 1;
}

message BuildHubRequest {
  string worldSessionID = 1;
  MatrixPositionProto position = 2;
}

message ListPlayersRequest {
  string gameSessionID = 1;
}

message GetBuildingTypeRequest {
  MPGameSessionProto gameSessionID = 1;
  string buildingTypeID = 2;
}

message ListTeamsRequest {
  string gameSessionID = 1;
}

message CreatePlayerRequest {
  MPPlayerProto player = 1;
}

message DeletePlayerRequest {
  string gameSessionID = 1;
  string playerID = 2;
}

message DeleteWorldRequest {
  string gameSessionID = 1;
  string worldID = 2;
}

message GetWorldRequest {
  string gameSessionID = 1;
  string worldID = 2;
}

message CreateTeamRequest {
  string gameSessionID = 1;
  MPTeamProto team = 2;
}

message UnsubscribeRequest {
  string worldSessionID = 1;
}

message CreateBuildingTypeRequest {
  MPGameSessionProto gameSessionID = 1;
  BuildingTypeProto buildingType = 2;
}

message DeleteTeamRequest {
  string gameSessionID = 1;
  string teamID = 2;
}

message AddPlayerToTeamRequest {
  string gameSessionID = 1;
  string teamID = 2;
  string playerID = 3;
}

message JoinWorldRequest {
  string gameSessionID = 1;
  string worldID = 2;
}

message BuildWellRequest {
  string worldSessionID = 1;
  MatrixPositionProto position = 2;
}

message RemovePlayerFromTeamRequest {
  string gameSessionID = 1;
  string teamID = 2;
  string playerID = 3;
}

message AuthenticateRequest {
  string password = 1;
  string playerName = 2;
}

message GetStateRequest {
  string worldSessionID = 1;
}

message SellBuildingRequest {
  string worldSessionID = 1;
  string buildingID = 2;
}

message LeaveWorldRequest {
  string worldSessionID = 1;
}

message UpdateStateRequest {
  MPPartialStateProto partialState = 1;
  string worldSessionID = 2;
  MPActionProto action = 3;
}

message DeAuthenticateRequest {
  string gameSessionID = 1;
}

message BuildMineRequest {
  string worldSessionID = 1;
  MatrixPositionProto position = 2;
}

message ListBuildingTypesRequest {
  MPGameSessionProto gameSessionID = 1;
}

//--------------------------------------------------------------------------------
//- Responses:

message Response {
  oneof response {
    AuthenticateResponse authenticateResponse = 1;
    DeAuthenticateResponse deAuthenticateResponse = 2;
    ListBuildingTypesResponse listBuildingTypesResponse = 3;
    AddPlayerToTeamResponse addPlayerToTeamResponse = 4;
    CreateWorldResponse createWorldResponse = 5;
    SellBuildingResponse sellBuildingResponse = 6;
    DeleteBuildingTypeResponse deleteBuildingTypeResponse = 7;
    UpdatePlayerResponse updatePlayerResponse = 8;
    DeleteWorldResponse deleteWorldResponse = 9;
    CreateBuildingTypeResponse createBuildingTypeResponse = 10;
    UnsubscribeResponse unsubscribeResponse = 11;
    GetPlayerResponse getPlayerResponse = 12;
    ListTeamPlayersResponse listTeamPlayersResponse = 13;
    GetTeamResponse getTeamResponse = 14;
    ListWorldsResponse listWorldsResponse = 15;
    UpdateWorldResponse updateWorldResponse = 16;
    UpdateTeamResponse updateTeamResponse = 17;
    ListTeamsResponse listTeamsResponse = 18;
    JoinWorldResponse joinWorldResponse = 19;
    DeletePlayerResponse deletePlayerResponse = 20;
    RemovePlayerFromTeamResponse removePlayerFromTeamResponse = 21;
    BuildResponse buildResponse = 22;
    GetStateResponse getStateResponse = 23;
    UpdateStateResponse updateStateResponse = 24;
    SubscribeResponse subscribeResponse = 25;
    CreatePlayerResponse createPlayerResponse = 26;
    GetWorldResponse getWorldResponse = 27;
    UpdateBuildingTypeResponse updateBuildingTypeResponse = 28;
    DeleteTeamResponse deleteTeamResponse = 29;
    LeaveWorldResponse leaveWorldResponse = 30;
    GetBuildingTypeResponse getBuildingTypeResponse = 31;
    ListPlayersResponse listPlayersResponse = 32;
    CreateTeamResponse createTeamResponse = 33;
  }
}

message AuthenticateResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    BAD_CREDENTIALS = 2;
    OK = 3;
    NO_SUCH_PLAYER = 4;
    PLAYER_BANNED = 5;
  }
  string message = 1;
  MPGameSessionProto gameSession = 2;
  Status status = 3;
}

message DeAuthenticateResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    OK = 2;
    NO_SUCH_GAME_SESSION = 3;
  }
  string message = 1;
  Status status = 2;
}

message ListBuildingTypesResponse {
  enum Status {
    OK = 0;
    NO_SUCH_GAME_SESSION = 1;
    NO_BUILDINGTYPES = 2;
    UNKNOWN_ERROR = 3;
  }
  repeated BuildingTypeProto buildingTypes = 1;
  string message = 2;
  Status status = 3;
}

message AddPlayerToTeamResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    PLAYER_ALREADY_IN_TEAM = 3;
    TEAM_FULL = 4;
    OK = 5;
    NO_SUCH_PLAYER = 6;
    NO_SUCH_TEAM = 7;
  }
  string message = 1;
  Status status = 2;
}

message CreateWorldResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    WORLD_EXISTS = 3;
    OK = 4;
  }
  MPWorldProto world = 1;
  string message = 2;
  Status status = 3;
}

message SellBuildingResponse {
  enum Status {
    CANNOT_SELL = 0;
    OK = 1;
  }
  string message = 1;
  Status status = 2;
}

message DeleteBuildingTypeResponse {
  enum Status {
    CANNOT_DELETE_BUILDINGTYPE = 0;
    OK = 1;
    NO_SUCH_GAME_SESSION = 2;
    NO_SUCH_BUILDINGTYPE = 3;
    BUILDINGTYPE_EXISTS = 4;
    UNKNOWN_ERROR = 5;
  }
  string message = 1;
  Status status = 2;
}

message UpdatePlayerResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    CANNOT_UPDATE_PLAYER = 3;
    OK = 4;
    NO_SUCH_PLAYER = 5;
  }
  string message = 1;
  Status status = 2;
}

message DeleteWorldResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    NO_SUCH_WORLD = 3;
    CANNOT_DELETE_WORLD = 4;
    OK = 5;
  }
  string message = 1;
  Status status = 2;
}

message CreateBuildingTypeResponse {
  enum Status {
    INVALID_DATA = 0;
    OK = 1;
    NO_SUCH_GAME_SESSION = 2;
    BUILDINGTYPE_EXISTS = 3;
    UNKNOWN_ERROR = 4;
  }
  string message = 1;
  BuildingTypeProto buildingType = 2;
  Status status = 3;
}

message UnsubscribeResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    OK = 4;
  }
  string message = 1;
  Status status = 2;
}

message GetPlayerResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    OK = 3;
    NO_SUCH_PLAYER = 4;
  }
  string message = 1;
  MPPlayerProto player = 2;
  Status status = 3;
}

message ListTeamPlayersResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    NO_PLAYERS = 3;
    OK = 4;
    NO_SUCH_TEAM = 5;
  }
  repeated MPPlayerProto players = 1;
  string message = 2;
  Status status = 3;
}

message GetTeamResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    OK = 3;
    NO_SUCH_TEAM = 4;
  }
  MPTeamProto team = 1;
  string message = 2;
  Status status = 3;
}

message ListWorldsResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_WORLDS = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    OK = 4;
  }
  repeated MPWorldProto worlds = 1;
  string message = 2;
  Status status = 3;
}

message UpdateWorldResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    NO_SUCH_WORLD = 3;
    CANNOT_UPDATE_WORLD = 4;
    OK = 5;
  }
  string message = 1;
  Status status = 2;
}

message UpdateTeamResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    CANNOT_UPDATE_TEAM = 3;
    OK = 4;
    NO_SUCH_TEAM = 5;
  }
  string message = 1;
  Status status = 2;
}

message ListTeamsResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    OK = 3;
    NO_TEAMS = 4;
  }
  repeated MPTeamProto teams = 1;
  string message = 2;
  Status status = 3;
}

message JoinWorldResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    NO_SUCH_WORLD = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
    WORLD_FULL = 6;
    PLAYER_BANNED = 7;
  }
  MPPartialStateProto partialState = 1;
  MPWorldProto world = 2;
  MPWorldSessionProto worldSession = 3;
  string message = 4;
  Status status = 5;
}

message DeletePlayerResponse {
  enum Status {
    CANNOT_DELETE_PLAYER = 0;
    SERVER_ERROR = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    OK = 4;
    NO_SUCH_PLAYER = 5;
  }
  string message = 1;
  Status status = 2;
}

message RemovePlayerFromTeamResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    OK = 3;
    NO_SUCH_PLAYER = 4;
    PLAYER_NOT_IN_TEAM = 5;
    NO_SUCH_TEAM = 6;
  }
  string message = 1;
  Status status = 2;
}

message BuildResponse {
  enum Status {
    INVALID_WORLD_SESSION = 0;
    INVALID_LOCATION = 1;
    INSUFFICIENT_FUNDS = 2;
    CANNOT_BUILD = 3;
    OK = 4;
  }
  string message = 1;
  Status status = 2;
}

message GetStateResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
  }
  MPPartialStateProto partialState = 1;
  ResourceSetProto resourceSet = 2;
  string message = 3;
  Status status = 4;
}

message UpdateStateResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
  }
  MPPartialStateProto partialState = 1;
  ResourceSetProto resourceSet = 2;
  string message = 3;
  Status status = 4;
}

message SubscribeResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
  }
  MPPartialStateProto partialState = 1;
  string message = 2;
  Status status = 3;
}

message CreatePlayerResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    OK = 2;
    PLAYER_EXISTS = 3;
  }
  string message = 1;
  MPPlayerProto player = 2;
  Status status = 3;
}

message GetWorldResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    NO_SUCH_WORLD = 3;
    OK = 4;
  }
  MPWorldProto world = 1;
  string message = 2;
  Status status = 3;
}

message UpdateBuildingTypeResponse {
  enum Status {
    OK = 0;
    NO_SUCH_GAME_SESSION = 1;
    NO_SUCH_BUILDINGTYPE = 2;
    CANNOT_UPDATE_BUILDINGTYPE = 3;
    UNKNOWN_ERROR = 4;
  }
  string message = 1;
  Status status = 2;
}

message DeleteTeamResponse {
  enum Status {
    SERVER_ERROR = 0;
    CANNOT_DELETE_TEAM = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    OK = 4;
    NO_SUCH_TEAM = 5;
  }
  string message = 1;
  Status status = 2;
}

message LeaveWorldResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    OK = 3;
  }
  string message = 1;
  Status status = 2;
}

message GetBuildingTypeResponse {
  enum Status {
    OK = 0;
    NO_SUCH_GAME_SESSION = 1;
    NO_SUCH_BUILDINGTYPE = 2;
    UNKNOWN_ERROR = 3;
  }
  string message = 1;
  BuildingTypeProto buildingType = 2;
  Status status = 3;
}

message ListPlayersResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    NO_PLAYERS = 3;
    OK = 4;
  }
  repeated MPPlayerProto players = 1;
  string message = 2;
  Status status = 3;
}

message CreateTeamResponse {
  enum Status {
    SERVER_ERROR = 0;
    INVALID_DATA = 1;
    NOT_AUTHORIZED = 2;
    TEAM_EXISTS = 3;
    OK = 4;
  }
  MPTeamProto team = 1;
  string message = 2;
  Status status = 3;
}

//--------------------------------------------------------------------------------
