/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Project Editor, v1.0 BETA
-------------------------------------------------------------------------------- */

package com.example.marspioneer.generation;

import com.example.marspioneer.model.*;
import com.example.marspioneer.proto.*;
import com.nkasenides.athlos.model.TerrainGenerator;
import com.raylabz.jsec.HashType;
import com.raylabz.jsec.Hashing;
import com.nkasenides.athlos.exception.ChunkOutOfBoundsException;
import com.raylabz.opensimplex.NoiseDetail;
import com.raylabz.opensimplex.OpenSimplexNoise;
import com.raylabz.opensimplex.Range;
import com.raylabz.opensimplex.RangedValue;

import java.util.HashMap;
import java.util.UUID;

public class MPTerrainGenerator extends TerrainGenerator<MPWorld, MPTerrainChunk, MPTerrainCell>{

    private OpenSimplexNoise noise;

    public MPTerrainGenerator(MPWorld world) {
        super(world);
        this.noise = new OpenSimplexNoise(world.getSeed());
        this.noise.setNoiseDetail(NoiseDetail.EIGHTH);
        this.noise.setFeatureSize(20);
        this.noise.setPower(1);
    }

    protected final MPTerrainCell generateCell(int cellRow, int cellCol) {    
        final MPTerrainCell cell = new MPTerrainCell();        
        cell.setPosition(new MatrixPosition(cellRow, cellCol));

        final RangedValue rangedValue = noise.getNoise2D(cellRow, cellCol);
        double heightValue = rangedValue.getValue(new Range(-255, 255));

        if (heightValue > 255) {
            heightValue = 255;
            cell.setType(CellType.ICE_CellType);
        }
        else if (heightValue > 220) {
            cell.setType(CellType.ICE_CellType);
        }
        else if (heightValue > 200) {
            cell.setType(CellType.GRAVEL_CellType);
        }
        else if (heightValue > -100) {
            cell.setType(CellType.SAND_CellType);
        }
        else if (heightValue > -200) {
            cell.setType(CellType.ROCK_CellType);
        }
        else if (heightValue > -255) {
            cell.setType(CellType.LAVA_CellType);
        }
        else if (heightValue < -255) {
            heightValue = -255;
            cell.setType(CellType.LAVA_CellType);
        }

        cell.setHeight((int) heightValue);

        return cell;        
    }    
    
    public final MPTerrainCell acquireCell(final int cellRow, final int cellCol) throws ChunkOutOfBoundsException {
        if (world.cellIsInBounds(cellRow, cellCol)) {
            return generateCell(cellRow, cellCol);
        }
        else {
            throw new ChunkOutOfBoundsException(cellRow, cellCol);
        }
    }

    public final MPTerrainChunk generateChunk(final int chunkRow, final int chunkCol) {

        final int chunkStartRow = MPTerrainChunk.getChunkStartRowFromChunkRow(chunkRow);
        final int chunkLastRow = MPTerrainChunk.getChunkLastRowFromChunkRow(chunkRow);
        final int chunkStartCol = MPTerrainChunk.getChunkStartColFromChunkCol(chunkCol);
        final int chunkLastCol = MPTerrainChunk.getChunkLastColFromChunkCol(chunkCol);

        MPTerrainChunk chunk = new MPTerrainChunk();
        chunk.setWorldID(world.getId());
        chunk.setId(UUID.randomUUID().toString());
        chunk.setPosition(new MatrixPosition(chunkRow, chunkCol));
        HashMap<String, MPTerrainCell> cells = new HashMap<>();

        for (int c = chunkStartCol; c <= chunkLastCol; c++) {
            for (int r = chunkStartRow; r <= chunkLastRow; r++) {
                MPTerrainCell cell = acquireCell(r, c);
                cells.put(Hashing.hash(HashType.MD5,r + "," + c), cell);
            }
        }
        chunk.setCells(cells);

        return chunk;
    }

}

